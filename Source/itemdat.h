/**
 * @file itemdat.h
 *
 * Interface of all item data.
 */
#pragma once

#include <cstdint>

#include "objdat.h"
#include "spelldat.h"
#include "utils/stdcompat/string_view.hpp"

namespace devilution {

/** @todo add missing values and apply */
enum _item_indexes : int16_t { // TODO defines all indexes in AllItemsList
	IDI_GOLD,
	IDI_WARRIOR,
	IDI_WARRSHLD,
	IDI_WARRCLUB,
	IDI_ROGUE,
	IDI_SORCERER,
	IDI_CLEAVER,
	IDI_FIRSTQUEST = IDI_CLEAVER,
	IDI_SKCROWN,
	IDI_INFRARING,
	IDI_ROCK,
	IDI_OPTAMULET,
	IDI_TRING,
	IDI_BANNER,
	IDI_HARCREST,
	IDI_STEELVEIL,
	IDI_GLDNELIX,
	IDI_ANVIL,
	IDI_MUSHROOM,
	IDI_BRAIN,
	IDI_FUNGALTM,
	IDI_SPECELIX,
	IDI_BLDSTONE,
	IDI_MAPOFDOOM,
	IDI_LASTQUEST = IDI_MAPOFDOOM,
	IDI_EAR,
	IDI_HEAL,
	IDI_MANA,
	IDI_IDENTIFY,
	IDI_PORTAL,
	IDI_ARMOFVAL,
	IDI_FULLHEAL,
	IDI_FULLMANA,
	IDI_GRISWOLD,
	IDI_LGTFORGE,
	IDI_LAZSTAFF,
	IDI_RESURRECT,
	IDI_OIL,
	IDI_SHORTSTAFF,
	IDI_BARDSWORD,
	IDI_BARDDAGGER,
	IDI_RUNEBOMB,
	IDI_THEODORE,
	IDI_AURIC,
	IDI_NOTE1,
	IDI_NOTE2,
	IDI_NOTE3,
	IDI_FULLNOTE,
	IDI_BROWNSUIT,
	IDI_GREYSUIT,
	IDI_SORCERER_DIABLO = 166,

	IDI_LAST = IDI_SORCERER_DIABLO,
	IDI_NONE = -1,
};

enum item_drop_rate : uint8_t {
	IDROP_NEVER,
	IDROP_REGULAR,
	IDROP_DOUBLE,
};

enum item_class : uint8_t {
	ICLASS_NONE,
	ICLASS_WEAPON,
	ICLASS_ARMOR,
	ICLASS_MISC,
	ICLASS_GOLD,
	ICLASS_QUEST,
};

enum item_equip_type : int8_t {
	ILOC_NONE,
	ILOC_ONEHAND,
	ILOC_TWOHAND,
	ILOC_ARMOR,
	ILOC_HELM,
	ILOC_RING,
	ILOC_AMULET,
	ILOC_UNEQUIPABLE,
	ILOC_BELT,
	ILOC_INVALID = -1,
};

/// Item graphic IDs; frame_num-11 of objcurs.cel.
enum item_cursor_graphic : uint8_t {
	// clang-format off
	ICURS_POTION_OF_FULL_MANA,
	ICURS_SCROLL_OF,
	ICURS_BROWN_SCROLL_OF, // unused
	ICURS_BlUE_SCROLL_OF,  // unused
	ICURS_GOLD_SMALL,
	ICURS_GOLD_MEDIUM,
	ICURS_GOLD_LARGE,
	ICURS_THICK_RING, // unused
	ICURS_BLEEDER,
	ICURS_BRAMBLE,
	ICURS_RING_OF_TRUTH,
	ICURS_RING_OF_REGHA,
	ICURS_RING,
	ICURS_RING_OF_ENGAGEMENT,
	ICURS_CONSTRICTING_RING,
	ICURS_SPECTRAL_ELIXIR,
	ICURS_RAINBOW_ELIXIR, // unused
	ICURS_GOLDEN_ELIXIR,
	ICURS_EMPYREAN_BAND,
	ICURS_EAR_SORCERER,
	ICURS_EAR_WARRIOR,
	ICURS_EAR_ROGUE,
	ICURS_ORB,     // unused
	ICURS_CUBE,    // unused
	ICURS_PYRAMID, // unused
	ICURS_BLOOD_STONE,
	ICURS_RED_ORB,        // unused
	ICURS_BLUE_SPHERE,    // unused
	ICURS_ORANGE_PYRAMID, // unused
	ICURS_BLACK_VIAL,     // unused
	ICURS_OIL,
	ICURS_ELIXIR_OF_VITALITY,
	ICURS_POTION_OF_HEALING,
	ICURS_POTION_OF_FULL_REJUVENATION,
	ICURS_ELIXIR_OF_MAGIC,
	ICURS_POTION_OF_FULL_HEALING,
	ICURS_ELIXIR_OF_DEXTERITY,
	ICURS_POTION_OF_REJUVENATION,
	ICURS_ELIXIR_OF_STRENGTH,
	ICURS_POTION_OF_MANA,
	ICURS_BRAIN,
	ICURS_CLAW,  // unused
	ICURS_TOOTH, // unused
	ICURS_BREAD, // unused
	ICURS_OPTIC_AMULET,
	ICURS_AMULET,
	ICURS_BROKEN_AMULET, // unused
	ICURS_BEETLE_AMULET, // unused
	ICURS_ANKH_AMULET,   // unused
	ICURS_POUCH,         // unused
	ICURS_WIZARDSPIKE,
	ICURS_DAGGER,
	ICURS_BOTTLE, // unused
	ICURS_BLACK_RAZOR,
	ICURS_GONNAGALS_DIRK,
	ICURS_ASSASSIN_KNIFE, // unused
	ICURS_BLADE,
	ICURS_BASTARD_SWORD,
	ICURS_EXECUTIONERS_BLADE,
	ICURS_MACE,
	ICURS_LONG_SWORD,
	ICURS_BROAD_SWORD,
	ICURS_FALCHION,
	ICURS_MORNING_STAR,
	ICURS_SHORT_SWORD,
	ICURS_CLAYMORE,
	ICURS_CLUB,
	ICURS_SABRE,
	ICURS_FALCONS_TALON,
	ICURS_BONECLUB, // unused
	ICURS_SPIKED_CLUB,
	ICURS_NAIL_CLUB, // unused
	ICURS_SCIMITAR,
	ICURS_AZUREWRATH, // unused
	ICURS_SHADOWFANG, // unused
	ICURS_FULL_HELM,
	ICURS_MAGIC_ROCK,
	ICURS_HELM_OF_SPIRITS,
	ICURS_THE_UNDEAD_CROWN,
	ICURS_ROYAL_CIRCLET,
	ICURS_FOOLS_CREST,
	ICURS_HARLEQUIN_CREST,
	ICURS_HELM,
	ICURS_BUCKLER,
	ICURS_HORNED_HELM, // unused
	ICURS_VEIL_OF_STEEL,
	ICURS_BOOK_GREY,
	ICURS_BOOK_RED,
	ICURS_BOOK_BLUE,
	ICURS_BLACK_MUSHROOM,
	ICURS_SKULL_CAP,
	ICURS_CAP,
	ICURS_TORN_FLESH_OF_SOULS,
	ICURS_THINKING_CAP,
	ICURS_TUNIC, // unused
	ICURS_CROWN,
	ICURS_MAP_OF_THE_STARS,
	ICURS_FUNGAL_TOME,
	ICURS_GREAT_HELM,
	ICURS_OVERLORDS_HELM,
	ICURS_STORMSHIELD, // unused
	ICURS_BATTLE_AXE,
	ICURS_HUNTERS_BOW,
	ICURS_FIELD_PLATE,
	ICURS_STONECUTTER,
	ICURS_SMALL_SHIELD,
	ICURS_CLEAVER,
	ICURS_STUDDED_LEATHER_ARMOR,
	ICURS_EAGLEHORN,
	ICURS_SHORT_STAFF,
	ICURS_TWO_HANDED_SWORD,
	ICURS_CHAIN_MAIL,
	ICURS_SMALL_AXE,
	ICURS_KITE_SHIELD,
	ICURS_SCALE_MAIL,
	ICURS_STEAMPUNK_SHIELD, // unused
	ICURS_SPLIT_SKULL_SHIELD,
	ICURS_DRAGONS_BREACH,
	ICURS_SHORT_BOW,
	ICURS_LONG_BATTLE_BOW,
	ICURS_LONG_WAR_BOW, // unused
	ICURS_WAR_HAMMER,
	ICURS_MAUL,
	ICURS_LONG_STAFF,
	ICURS_WAR_STAFF,
	ICURS_SHAMAN_STAFF, // unused
	ICURS_TAVERN_SIGN,
	ICURS_HARD_LEATHER_ARMOR,
	ICURS_RAGS,
	ICURS_QUILTED_ARMOR,
	ICURS_TRIPLE_FLAIL, // unused
	ICURS_FLAIL,
	ICURS_TOWER_SHIELD,
	ICURS_COMPOSITE_BOW,
	ICURS_GREAT_SWORD,
	ICURS_LEATHER_ARMOR,
	ICURS_SPLINT_MAIL,
	ICURS_ROBE,
	ICURS_NIGHTSCAPE,
	ICURS_LEATHER_TUNIC, // unused
	ICURS_ANVIL_OF_FURY,
	ICURS_BROAD_AXE,
	ICURS_LARGE_AXE,
	ICURS_GREAT_AXE,
	ICURS_AXE,
	ICURS_BARBARIAN_CLEAVER, // unused
	ICURS_HOLY_DEFENDER,
	ICURS_LARGE_SHIELD,
	ICURS_GOTHIC_SHIELD,
	ICURS_CLOAK,
	ICURS_CAPE,
	ICURS_FULL_PLATE_MAIL,
	ICURS_GOTHIC_PLATE,
	ICURS_BREAST_PLATE,
	ICURS_RING_MAIL,
	ICURS_STAFF_OF_LAZARUS,
	ICURS_EMBEDDED_GREAT_AXE, // unused
	ICURS_ARKAINES_VALOR,
	ICURS_THE_NEEDLER,
	ICURS_NAJS_LIGHT_PLATE,
	ICURS_THE_GRIZZLY,
	ICURS_THE_GRANDFATHER,
	ICURS_THE_PROTECTOR,
	ICURS_MESSERSCHMIDTS_REAVER,
	ICURS_WINDFORCE,
	ICURS_SHORT_WAR_BOW,
	ICURS_COMPOSITE_STAFF,
	ICURS_SHORT_BATTLE_BOW,
	// Hellfire
	ICURS_XORINES_RING,
	ICURS_SAPPHIRE_RING, // unused
	ICURS_AMULET_OF_WARDING,
	ICURS_RUNE_AMULET, // unused
	ICURS_RUBY_AMULET, // unused
	ICURS_KARIKS_RING,
	ICURS_STRIPED_RING, // unused
	ICURS_PENTAGRAM_AMULET, // unused
	ICURS_MERCURIAL_RING,
	ICURS_RING_OF_THUNDER,
	ICURS_SPHERE_AMULET, // unused
	ICURS_GIANTS_KNUCKLE,
	ICURS_AURIC_AMULET,
	ICURS_RING_OF_THE_MYSTICS,
	ICURS_TRIPLE_RING, // unused
	ICURS_ACOLYTES_AMULET,
	ICURS_RING_OF_MAGMA,
	ICURS_STEEL_AMULET, // unused
	ICURS_GLADIATORS_RING,
	ICURS_RUNE_BOMB,
	ICURS_THEODORE,
	ICURS_TORN_NOTE_1,
	ICURS_TORN_NOTE_2,
	ICURS_TORN_NOTE_3,
	ICURS_RECONSTRUCTED_NOTE,
	ICURS_RUNE_OF_FIRE,
	ICURS_GREATER_RUNE_OF_FIRE,
	ICURS_RUNE_OF_LIGHTNING,
	ICURS_GREATER_RUNE_OF_LIGHTNING,
	ICURS_RUNE_OF_STONE,
	ICURS_GREY_SUIT,
	ICURS_BROWN_SUIT,
	ICURS_EATER_OF_SOULS,
	ICURS_UGLY_SWORD, // unused
	ICURS_SPIKED_SWORD, // unused
	ICURS_ARMOR_OF_GLOOM,
	ICURS_BONE_CHAIN_ARMOR,
	ICURS_THUNDERCLAP,
	ICURS_DIAMONDEDGE,
	ICURS_JESTER_STAFF,
	ICURS_SAPPHIRE_STAFF,
	ICURS_FLAMBEAU,
	ICURS_GNAT_STING,
	ICURS_RUBY_AXE, // unused
	ICURS_STAR_MACE, // unused
	ICURS_SPINED_MACE, // unused
	ICURS_BONE_MACE, // unused
	ICURS_BONE_AXE, // unused
	ICURS_BONE_SWORD, // unused
	ICURS_BONE_MAUL,
	ICURS_BONE_STAFF,
	ICURS_BLITZEN,
	ICURS_SPIKED_MACE, // unused
	ICURS_MYTHIC_SWORD, // unused
	ICURS_MYTHIC_AXE, // unused
	ICURS_RUBY_STAR, // unused
	ICURS_UGLY_MACE, // unused
	ICURS_DEMON_PLATE,
	ICURS_BOVINE,
	ICURS_EMPTY, // unused
	ICURS_EMPTY2, // unused
	// clang-format on
};

enum class ItemType : int8_t {
	Misc,
	Sword,
	Axe,
	Bow,
	Mace,
	Shield,
	LightArmor,
	Helm,
	MediumArmor,
	HeavyArmor,
	Staff,
	Gold,
	Ring,
	Amulet,
	None = -1,
};

string_view ItemTypeToString(ItemType itemType);

enum unique_base_item : int8_t {
	UITYPE_NONE,
	UITYPE_SHORTBOW,
	UITYPE_LONGBOW,
	UITYPE_HUNTBOW,
	UITYPE_COMPBOW,
	UITYPE_WARBOW,
	UITYPE_BATTLEBOW,
	UITYPE_DAGGER,
	UITYPE_FALCHION,
	UITYPE_CLAYMORE,
	UITYPE_BROADSWR,
	UITYPE_SABRE,
	UITYPE_SCIMITAR,
	UITYPE_LONGSWR,
	UITYPE_BASTARDSWR,
	UITYPE_TWOHANDSWR,
	UITYPE_GREATSWR,
	UITYPE_CLEAVER,
	UITYPE_LARGEAXE,
	UITYPE_BROADAXE,
	UITYPE_SMALLAXE,
	UITYPE_BATTLEAXE,
	UITYPE_GREATAXE,
	UITYPE_MACE,
	UITYPE_MORNSTAR,
	UITYPE_SPIKCLUB,
	UITYPE_MAUL,
	UITYPE_WARHAMMER,
	UITYPE_FLAIL,
	UITYPE_LONGSTAFF,
	UITYPE_SHORTSTAFF,
	UITYPE_COMPSTAFF,
	UITYPE_QUARSTAFF,
	UITYPE_WARSTAFF,
	UITYPE_SKULLCAP,
	UITYPE_HELM,
	UITYPE_GREATHELM,
	UITYPE_CROWN,
	UITYPE_38,
	UITYPE_RAGS,
	UITYPE_STUDARMOR,
	UITYPE_CLOAK,
	UITYPE_ROBE,
	UITYPE_CHAINMAIL,
	UITYPE_LEATHARMOR,
	UITYPE_BREASTPLATE,
	UITYPE_CAPE,
	UITYPE_PLATEMAIL,
	UITYPE_FULLPLATE,
	UITYPE_BUCKLER,
	UITYPE_SMALLSHIELD,
	UITYPE_LARGESHIELD,
	UITYPE_KITESHIELD,
	UITYPE_GOTHSHIELD,
	UITYPE_RING,
	UITYPE_55,
	UITYPE_AMULET,
	UITYPE_SKCROWN,
	UITYPE_INFRARING,
	UITYPE_OPTAMULET,
	UITYPE_TRING,
	UITYPE_HARCREST,
	UITYPE_MAPOFDOOM,
	UITYPE_ELIXIR,
	UITYPE_ARMOFVAL,
	UITYPE_STEELVEIL,
	UITYPE_GRISWOLD,
	UITYPE_LGTFORGE,
	UITYPE_LAZSTAFF,
	UITYPE_BOVINE,
	UITYPE_INVALID = -1,
};

enum item_special_effect {
	// clang-format off
	ISPL_NONE           = 0,
	ISPL_INFRAVISION    = 1 << 0,
	ISPL_RNDSTEALLIFE   = 1 << 1,
	ISPL_RNDARROWVEL    = 1 << 2,
	ISPL_FIRE_ARROWS    = 1 << 3,
	ISPL_FIREDAM        = 1 << 4,
	ISPL_LIGHTDAM       = 1 << 5,
	ISPL_DRAINLIFE      = 1 << 6,
	ISPL_UNKNOWN_1      = 1 << 7,
	ISPL_NOHEALPLR      = 1 << 8,
	ISPL_MULT_ARROWS    = 1 << 9,
	ISPL_UNKNOWN_3      = 1 << 10,
	ISPL_KNOCKBACK      = 1 << 11,
	ISPL_NOHEALMON      = 1 << 12,
	ISPL_STEALMANA_3    = 1 << 13,
	ISPL_STEALMANA_5    = 1 << 14,
	ISPL_STEALLIFE_3    = 1 << 15,
	ISPL_STEALLIFE_5    = 1 << 16,
	ISPL_QUICKATTACK    = 1 << 17,
	ISPL_FASTATTACK     = 1 << 18,
	ISPL_FASTERATTACK   = 1 << 19,
	ISPL_FASTESTATTACK  = 1 << 20,
	ISPL_FASTRECOVER    = 1 << 21,
	ISPL_FASTERRECOVER  = 1 << 22,
	ISPL_FASTESTRECOVER = 1 << 23,
	ISPL_FASTBLOCK      = 1 << 24,
	ISPL_LIGHT_ARROWS   = 1 << 25,
	ISPL_THORNS         = 1 << 26,
	ISPL_NOMANA         = 1 << 27,
	ISPL_ABSHALFTRAP    = 1 << 28,
	ISPL_UNKNOWN_4      = 1 << 29,
	ISPL_3XDAMVDEM      = 1 << 30,
	ISPL_ALLRESZERO     = 1 << 31,
	// clang-format on
};

typedef enum item_special_effect_hf {
	// clang-format off
	ISPLHF_DEVASTATION  = 1 << 0,
	ISPLHF_DECAY        = 1 << 1,
	ISPLHF_PERIL        = 1 << 2,
	ISPLHF_JESTERS      = 1 << 3,
	ISPLHF_DOPPELGANGER = 1 << 4,
	ISPLHF_ACDEMON      = 1 << 5,
	ISPLHF_ACUNDEAD     = 1 << 6,
	// clang-format on
} item_special_effect_hf;

enum item_misc_id : int8_t {
	IMISC_NONE,
	IMISC_USEFIRST,
	IMISC_FULLHEAL,
	IMISC_HEAL,
	IMISC_OLDHEAL,
	IMISC_DEADHEAL,
	IMISC_MANA,
	IMISC_FULLMANA,
	IMISC_POTEXP,  /* add experience */
	IMISC_POTFORG, /* remove experience */
	IMISC_ELIXSTR,
	IMISC_ELIXMAG,
	IMISC_ELIXDEX,
	IMISC_ELIXVIT,
	IMISC_ELIXWEAK, /* double check with alpha */
	IMISC_ELIXDIS,
	IMISC_ELIXCLUM,
	IMISC_ELIXSICK,
	IMISC_REJUV,
	IMISC_FULLREJUV,
	IMISC_USELAST,
	IMISC_SCROLL,
	IMISC_SCROLLT,
	IMISC_STAFF,
	IMISC_BOOK,
	IMISC_RING,
	IMISC_AMULET,
	IMISC_UNIQUE,
	IMISC_FOOD, /* from demo/PSX */
	IMISC_OILFIRST,
	IMISC_OILOF, /* oils are beta or hellfire only */
	IMISC_OILACC,
	IMISC_OILMAST,
	IMISC_OILSHARP,
	IMISC_OILDEATH,
	IMISC_OILSKILL,
	IMISC_OILBSMTH,
	IMISC_OILFORT,
	IMISC_OILPERM,
	IMISC_OILHARD,
	IMISC_OILIMP,
	IMISC_OILLAST,
	IMISC_MAPOFDOOM,
	IMISC_EAR,
	IMISC_SPECELIX,
	IMISC_0x2D, // Unknown
	IMISC_RUNEFIRST,
	IMISC_RUNEF,
	IMISC_RUNEL,
	IMISC_GR_RUNEL,
	IMISC_GR_RUNEF,
	IMISC_RUNES,
	IMISC_RUNELAST,
	IMISC_AURIC,
	IMISC_NOTE,
	IMISC_INVALID = -1,
};

struct ItemData {
	enum item_drop_rate iRnd;
	enum item_class iClass;
	enum item_equip_type iLoc;
	enum item_cursor_graphic iCurs;
	enum ItemType itype;
	enum unique_base_item iItemId;
	const char *iName;
	const char *iSName;
	uint8_t iMinMLvl;
	uint8_t iDurability;
	uint8_t iMinDam;
	uint8_t iMaxDam;
	uint8_t iMinAC;
	uint8_t iMaxAC;
	uint8_t iMinStr;
	uint8_t iMinMag;
	uint8_t iMinDex;
	uint32_t iFlags; // item_special_effect as bit flags
	enum item_misc_id iMiscId;
	enum spell_id iSpell;
	bool iUsable;
	uint16_t iValue;
};

enum item_effect_type : int8_t {
	IPL_TOHIT,
	IPL_TOHIT_CURSE,
	IPL_DAMP,
	IPL_DAMP_CURSE,
	IPL_TOHIT_DAMP,
	IPL_TOHIT_DAMP_CURSE,
	IPL_ACP,
	IPL_ACP_CURSE,
	IPL_FIRERES,
	IPL_LIGHTRES,
	IPL_MAGICRES,
	IPL_ALLRES,
	IPL_SPLCOST, /* only used in beta */
	IPL_SPLDUR,  /* only used in beta */
	IPL_SPLLVLADD,
	IPL_CHARGES,
	IPL_FIREDAM,
	IPL_LIGHTDAM,
	IPL_0x12, // Unknown
	IPL_STR,
	IPL_STR_CURSE,
	IPL_MAG,
	IPL_MAG_CURSE,
	IPL_DEX,
	IPL_DEX_CURSE,
	IPL_VIT,
	IPL_VIT_CURSE,
	IPL_ATTRIBS,
	IPL_ATTRIBS_CURSE,
	IPL_GETHIT_CURSE,
	IPL_GETHIT,
	IPL_LIFE,
	IPL_LIFE_CURSE,
	IPL_MANA,
	IPL_MANA_CURSE,
	IPL_DUR,
	IPL_DUR_CURSE,
	IPL_INDESTRUCTIBLE,
	IPL_LIGHT,
	IPL_LIGHT_CURSE,
	IPL_0x28,        // Unknown
	IPL_MULT_ARROWS, /* only used in hellfire */
	IPL_FIRE_ARROWS,
	IPL_LIGHT_ARROWS,
	IPL_INVCURS,
	IPL_THORNS,
	IPL_NOMANA,
	IPL_NOHEALPLR, // unused
	IPL_0x30,      // Unknown
	IPL_0x31,      // Unknown
	IPL_FIREBALL,  /* only used in hellfire */
	IPL_0x33,      // Unknown
	IPL_ABSHALFTRAP,
	IPL_KNOCKBACK,
	IPL_NOHEALMON, // unused
	IPL_STEALMANA,
	IPL_STEALLIFE,
	IPL_TARGAC,
	IPL_FASTATTACK,
	IPL_FASTRECOVER,
	IPL_FASTBLOCK,
	IPL_DAMMOD,
	IPL_RNDARROWVEL,
	IPL_SETDAM,
	IPL_SETDUR,
	IPL_NOMINSTR,
	IPL_SPELL,
	IPL_FASTSWING, // unused
	IPL_ONEHAND,
	IPL_3XDAMVDEM,
	IPL_ALLRESZERO,
	IPL_0x47, // Unknown
	IPL_DRAINLIFE,
	IPL_RNDSTEALLIFE,
	IPL_INFRAVISION, // unused
	IPL_SETAC,
	IPL_ADDACLIFE,
	IPL_ADDMANAAC,
	IPL_FIRERESCLVL, // unused
	IPL_AC_CURSE,
	IPL_LASTDIABLO = IPL_AC_CURSE,
	IPL_FIRERES_CURSE,
	IPL_LIGHTRES_CURSE,
	IPL_MAGICRES_CURSE,
	IPL_ALLRES_CURSE, // unused
	IPL_DEVASTATION,
	IPL_DECAY,
	IPL_PERIL,
	IPL_JESTERS,
	IPL_CRYSTALLINE,
	IPL_DOPPELGANGER,
	IPL_ACDEMON,
	IPL_ACUNDEAD,
	IPL_MANATOLIFE,
	IPL_LIFETOMANA,
	IPL_INVALID = -1,
};

enum goodorevil : uint8_t {
	GOE_ANY,
	GOE_EVIL,
	GOE_GOOD,
};

enum affix_item_type : uint8_t {
	// clang-format off
	PLT_MISC  = 1 << 0,
	PLT_BOW   = 1 << 1,
	PLT_STAFF = 1 << 2,
	PLT_WEAP  = 1 << 3,
	PLT_SHLD  = 1 << 4,
	PLT_ARMO  = 1 << 5,
	// clang-format on
};

struct ItemPower {
	item_effect_type type;
	int param1;
	int param2;
};

struct PLStruct {
	const char *PLName;
	ItemPower power;
	int8_t PLMinLvl;
	int PLIType; // affix_item_type as bit flags
	enum goodorevil PLGOE;
	bool PLDouble;
	bool PLOk;
	int minVal;
	int maxVal;
	int multVal;
};

struct UniqueItem {
	const char *UIName;
	enum unique_base_item UIItemId;
	int8_t UIMinLvl;
	uint8_t UINumPL;
	int UIValue;
	ItemPower powers[6];
};

extern ItemData AllItemsList[];
extern const PLStruct ItemPrefixes[];
extern const PLStruct ItemSuffixes[];
extern const UniqueItem UniqueItems[];

} // namespace devilution
